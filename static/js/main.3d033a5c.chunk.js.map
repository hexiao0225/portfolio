{"version":3,"sources":["img/RandomThoughts1.jpg","Cover.js","About.js","Footer.js","Intro.js","ArtistsBook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blob","fill","width","height","viewBox","xmlns","transform","d","Cover","blob","About","Footer","ScrollIndicator","points","Intro","props","className","title","description","backgroundColor","ArtistsBook","ArtistsBookDescription","src","RandomThoughts1","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,6C,+HCErCC,G,WAAO,SAAC,GAAD,QAAGC,YAAH,MAAU,OAAV,SACX,yBACEC,MAAM,MACNC,OAAO,MACPC,QAAQ,cACRC,MAAM,8BAEN,uBAAGC,UAAU,sBACX,0BACEC,EAAE,iRACFN,KAAMA,QAcCO,EARM,SAAAC,GAAI,OACvB,6BACE,kBAAC,EAAD,CAAMR,KAAM,YACZ,8CACA,2DCPWS,EAbM,kBACnB,6BACE,qCACA,mWCIWC,EAPO,kBACpB,6BACE,0EACA,sDCFEC,EAAkB,kBACtB,yBACEP,MAAM,6BACND,QAAQ,YACRF,MAAM,KACNC,OAAO,MAEP,kDACA,6BAASU,OAAO,iIAcLC,EAVM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACnB,6BACE,yBAAKC,UAAU,oBACZD,EAAME,MACNF,EAAMG,YACP,kBAAC,EAAD,S,gBChBAH,EAAQ,CACZE,MAAO,eACPC,YAAa,mCACbC,gBAAiB,WAaJC,EAVY,SAAAC,GAAsB,OAC/C,6BACE,kBAAC,EAAD,CAAON,MAAOA,IACd,yBACEO,IAAKC,IACLC,MAAO,CAAEtB,MAAO,QAASC,OAAQ,aCSxBsB,MAjBf,WACE,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCPcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d033a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/RandomThoughts1.8f23909d.jpg\";","import React from 'react';\n\nconst Blob = ({ fill = '#fff' }) => (\n  <svg\n    width=\"800\"\n    height=\"600\"\n    viewBox=\"0 0 600 600\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g transform=\"translate(300,300)\">\n      <path\n        d=\"M157.6,-128.8C202.6,-69.2,236.3,-3.8,225.8,55.1C215.2,114.1,160.3,166.5,95.7,196.9C31.1,227.3,-43.2,235.8,-100.6,208.4C-158,180.9,-198.4,117.7,-211.8,50.7C-225.2,-16.2,-211.5,-87,-171.7,-145.4C-131.9,-203.8,-65.9,-249.9,-4.8,-246.1C56.3,-242.2,112.6,-188.4,157.6,-128.8Z\"\n        fill={fill}\n      />\n    </g>\n  </svg>\n);\n\nexport const Cover = blob => (\n  <div>\n    <Blob fill={'#013f92'}></Blob>\n    <h1>Hi, I am Xiao.</h1>\n    <h4>I'm a front end developer</h4>\n  </div>\n);\n\nexport default Cover;\n","import React from 'react';\n\nexport const About = () => (\n  <div>\n    <h1>About</h1>\n    <p>\n      Currently based in San Francisco, Xiao is a front-end developer, and\n      second year master student at Carnegie Mellon University, Entertainment\n      Technology Center. She is interested in exploring the intersection between\n      design and technology. Outside of work, she likes Ikebana, going to art\n      museums and browsing awwwards.com.\n    </p>\n  </div>\n);\n\nexport default About;\n","import React from 'react';\n\nexport const Footer = () => (\n  <div>\n    <p>Coded with love and coffee in San Francisco</p>\n    <p>xiaohe@andrew.cmu.edu</p>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\n\nconst ScrollIndicator = () => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 32 42\"\n    width=\"32\"\n    height=\"42\"\n  >\n    <desc>Scroll Indicator</desc>\n    <polygon points=\"30.605 25.641 16.5 39.746 16.5 1.048 15.5 1.048 15.5 39.746 1.396 25.641 0.689 26.348 16 41.66 31.312 26.348 30.605 25.641\"></polygon>\n  </svg>\n);\n\nexport const Intro = ({ props }) => (\n  <div>\n    <div className=\"Page-Intro-Cover\">\n      {props.title}\n      {props.description}\n      <ScrollIndicator></ScrollIndicator>\n    </div>\n  </div>\n);\n\nexport default Intro;\n","import React from 'react';\nimport Intro from './Intro';\nimport RandomThoughts1 from './img/RandomThoughts1.jpg';\n\nconst props = {\n  title: 'Artists Book',\n  description: 'some description on Artists Book',\n  backgroundColor: '#013F92'\n};\n\nexport const ArtistsBook = ArtistsBookDescription => (\n  <div>\n    <Intro props={props}></Intro>\n    <img\n      src={RandomThoughts1}\n      style={{ width: '300px', height: '300px' }}\n    ></img>\n  </div>\n);\n\nexport default ArtistsBook;\n","import React from 'react';\nimport './App.css';\nimport Cover from './Cover';\nimport About from './About';\nimport Footer from './Footer';\nimport ArtistsBook from './ArtistsBook';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Cover-Page\">\n        <Cover></Cover>\n      </div>\n      <div className=\"About-Page\">\n        <About></About>\n      </div>\n      <div>\n        <ArtistsBook></ArtistsBook>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}